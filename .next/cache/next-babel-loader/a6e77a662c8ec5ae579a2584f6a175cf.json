{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\nexport default class Api {\n  constructor() {\n    Api.axiosInstance = this.loadAxios();\n    Api.cookies = new Cookies();\n  }\n\n  static signIn(email, password, onSuccess, onFailure, onStart, onFinish) {\n    onStart();\n    var data = {\n      email: email,\n      password: password\n    };\n    Api.axiosInstance.post(`${process.env.NEXT_PUBLIC_API_URL}/auth/sign_in`, data).then(function (response) {\n      onSuccess(response);\n      Api.cookies.set('access-token', response.headers['access-token'], {\n        path: '/'\n      });\n      Api.cookies.set('client', response.headers['client'], {\n        path: '/'\n      });\n      Api.cookies.set('uid', response.headers['uid'], {\n        path: '/'\n      });\n      Api.cookies.set('role', response.data.data.roles_list[0], {\n        path: '/'\n      });\n    }).catch(function (error) {\n      console.log(error);\n      onFailure(error.response.data.errors);\n    });\n    onFinish();\n  }\n\n  static userLoggedIn() {\n    return Api.cookies.get('access-token') != undefined && Api.cookies.get('client') != undefined && Api.cookies.get('uid') != undefined && Api.cookies.get('role') != undefined;\n  }\n\n  loadAxios() {\n    const axiosInstance = axios.create();\n    axiosInstance.interceptors.request.use(config => {\n      config.headers = {\n        'access-token': Api.cookies.get('token') == undefined ? '' : Api.cookies.get('token'),\n        'client': Api.cookies.get('client') == undefined ? '' : Api.cookies.get('client'),\n        'uid': Api.cookies.get('uid') == undefined ? '' : Api.cookies.get('uid')\n      };\n      return config;\n    }, error => Promise.reject(error));\n    return axiosInstance;\n  }\n\n}\n\n_defineProperty(Api, \"axiosInstance\", void 0);","map":{"version":3,"sources":["/Users/hectorandac/Documents/Projects/auctions/auctions-front-end/pages/components/api.js"],"names":["React","axios","Cookies","Api","constructor","axiosInstance","loadAxios","cookies","signIn","email","password","onSuccess","onFailure","onStart","onFinish","data","post","process","env","NEXT_PUBLIC_API_URL","then","response","set","headers","path","roles_list","catch","error","console","log","errors","userLoggedIn","get","undefined","create","interceptors","request","use","config","Promise","reject"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,eAAe,MAAMC,GAAN,CAAU;AAIvBC,EAAAA,WAAW,GAAG;AACZD,IAAAA,GAAG,CAACE,aAAJ,GAAoB,KAAKC,SAAL,EAApB;AACAH,IAAAA,GAAG,CAACI,OAAJ,GAAc,IAAIL,OAAJ,EAAd;AACD;;AAED,SAAOM,MAAP,CAAcC,KAAd,EAAqBC,QAArB,EAA+BC,SAA/B,EAA0CC,SAA1C,EAAqDC,OAArD,EAA8DC,QAA9D,EAAwE;AACtED,IAAAA,OAAO;AACP,QAAIE,IAAI,GAAG;AACTN,MAAAA,KAAK,EAAEA,KADE;AAETC,MAAAA,QAAQ,EAAEA;AAFD,KAAX;AAIAP,IAAAA,GAAG,CAACE,aAAJ,CAAkBW,IAAlB,CAAwB,GAAEC,OAAO,CAACC,GAAR,CAAYC,mBAAoB,eAA1D,EAA0EJ,IAA1E,EAAgFK,IAAhF,CAAqF,UAAUC,QAAV,EAAoB;AACvGV,MAAAA,SAAS,CAACU,QAAD,CAAT;AACAlB,MAAAA,GAAG,CAACI,OAAJ,CAAYe,GAAZ,CAAgB,cAAhB,EAAgCD,QAAQ,CAACE,OAAT,CAAiB,cAAjB,CAAhC,EAAkE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAlE;AACArB,MAAAA,GAAG,CAACI,OAAJ,CAAYe,GAAZ,CAAgB,QAAhB,EAA0BD,QAAQ,CAACE,OAAT,CAAiB,QAAjB,CAA1B,EAAsD;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAtD;AACArB,MAAAA,GAAG,CAACI,OAAJ,CAAYe,GAAZ,CAAgB,KAAhB,EAAuBD,QAAQ,CAACE,OAAT,CAAiB,KAAjB,CAAvB,EAAgD;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAhD;AACArB,MAAAA,GAAG,CAACI,OAAJ,CAAYe,GAAZ,CAAgB,MAAhB,EAAwBD,QAAQ,CAACN,IAAT,CAAcA,IAAd,CAAmBU,UAAnB,CAA8B,CAA9B,CAAxB,EAA0D;AAAED,QAAAA,IAAI,EAAE;AAAR,OAA1D;AACD,KAND,EAMGE,KANH,CAMS,UAAUC,KAAV,EAAiB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAf,MAAAA,SAAS,CAACe,KAAK,CAACN,QAAN,CAAeN,IAAf,CAAoBe,MAArB,CAAT;AACD,KATD;AAUAhB,IAAAA,QAAQ;AACT;;AAED,SAAOiB,YAAP,GAAsB;AACpB,WAAO5B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,cAAhB,KAAmCC,SAAnC,IAAgD9B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,QAAhB,KAA6BC,SAA7E,IAA0F9B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,KAAhB,KAA0BC,SAApH,IAAiI9B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,MAAhB,KAA2BC,SAAnK;AACD;;AAED3B,EAAAA,SAAS,GAAG;AACV,UAAMD,aAAa,GAAGJ,KAAK,CAACiC,MAAN,EAAtB;AAEA7B,IAAAA,aAAa,CAAC8B,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACEC,MAAM,IAAI;AACRA,MAAAA,MAAM,CAACf,OAAP,GAAiB;AACf,wBAAgBpB,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,OAAhB,KAA4BC,SAA5B,GAAwC,EAAxC,GAA6C9B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,OAAhB,CAD9C;AAEf,kBAAU7B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,QAAhB,KAA6BC,SAA7B,GAAyC,EAAzC,GAA8C9B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,QAAhB,CAFzC;AAGf,eAAO7B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,KAAhB,KAA0BC,SAA1B,GAAsC,EAAtC,GAA2C9B,GAAG,CAACI,OAAJ,CAAYyB,GAAZ,CAAgB,KAAhB;AAHnC,OAAjB;AAMA,aAAOM,MAAP;AACD,KATH,EAUEX,KAAK,IAAIY,OAAO,CAACC,MAAR,CAAeb,KAAf,CAVX;AAaA,WAAOtB,aAAP;AACD;;AAjDsB;;gBAAJF,G","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\n\nexport default class Api {\n\n  static axiosInstance;\n\n  constructor() {\n    Api.axiosInstance = this.loadAxios();\n    Api.cookies = new Cookies();\n  }\n\n  static signIn(email, password, onSuccess, onFailure, onStart, onFinish) {\n    onStart();\n    var data = {\n      email: email,\n      password: password\n    }\n    Api.axiosInstance.post(`${process.env.NEXT_PUBLIC_API_URL}/auth/sign_in`, data).then(function (response) {\n      onSuccess(response);\n      Api.cookies.set('access-token', response.headers['access-token'], { path: '/' });\n      Api.cookies.set('client', response.headers['client'], { path: '/' });\n      Api.cookies.set('uid', response.headers['uid'], { path: '/' });\n      Api.cookies.set('role', response.data.data.roles_list[0], { path: '/' });\n    }).catch(function (error) {\n      console.log(error)\n      onFailure(error.response.data.errors);\n    });\n    onFinish();\n  }\n\n  static userLoggedIn() {\n    return Api.cookies.get('access-token') != undefined && Api.cookies.get('client') != undefined && Api.cookies.get('uid') != undefined && Api.cookies.get('role') != undefined\n  }\n\n  loadAxios() {\n    const axiosInstance = axios.create();\n  \n    axiosInstance.interceptors.request.use(\n      config => {\n        config.headers = {\n          'access-token': Api.cookies.get('token') == undefined ? '' : Api.cookies.get('token'),\n          'client': Api.cookies.get('client') == undefined ? '' : Api.cookies.get('client'),\n          'uid': Api.cookies.get('uid') == undefined ? '' : Api.cookies.get('uid')\n        };\n  \n        return config;\n      },\n      error => Promise.reject(error)\n    );\n  \n    return axiosInstance;\n  }\n}"]},"metadata":{},"sourceType":"module"}